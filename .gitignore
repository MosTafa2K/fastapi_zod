# Python
__pycache__/
*.py[co]
*.mo
*.toc
*.egg
*.egg-info
dist
build

# FastAPI
.env
.env.*
.venv
.venv.*
env
venv

# ReactJS
node_modules
npm-debug.log
yarn-error.log
.pnp
.pnp.js

# General
.env.local
.env.development.local
.env.production.local
.env.test.local

.DS_Store
.env
.env.local
.env.development.local
.env.production.local
.env.test.local

# Testing
/coverage
/tox
.nox
.nox.log
.pytest_cache

# IPython
.ipynb_checkpoints

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov
.tox
.nox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothes.is
.pytest_cache

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build

# PyBuilder
target

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies, so it's arguably best to add Pipfile.lock to .gitignore.
#   However, if you have a single-OS project, and using a CI/CD that builds and tests on the same
#   OS, you may want to include it in your version control. You can do this by commenting out the
#   line below.
Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/py_oops
__pypackages__

# Celery stuff
celerybeat-schedule
celerybeat-schedule.db
